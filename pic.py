import streamlit as st
from datetime import datetime
from reportlab.pdfgen import canvas
from io import BytesIO
import base64

# Configura√ß√µes da p√°gina
st.set_page_config(
    page_title="PIC - FORTNEER",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Estilos CSS personalizados
def local_css(file_name):
    try:
        with open(file_name) as f:
            st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)
    except:
        # CSS padr√£o se o arquivo n√£o existir
        st.markdown("""
        <style>
            .header-subtitle {
                font-size: 1.1rem;
                color: #555;
                margin-top: -10px;
            }
            .header-location {
                font-style: italic;
                color: #777;
            }
            .sidebar-header {
                margin-bottom: 20px;
            }
            .quick-info {
                background-color: #f8f9fa;
                padding: 15px;
                border-radius: 10px;
                margin-top: 20px;
            }
            .status-box {
                padding: 15px;
                border-radius: 8px;
                margin-bottom: 15px;
                border-left: 5px solid;
            }
            .status-box.green {
                background-color: #e6f7e6;
                border-color: #28a745;
            }
            .status-box.yellow {
                background-color: #fff8e6;
                border-color: #ffc107;
            }
            .status-box.red {
                background-color: #ffebee;
                border-color: #dc3545;
            }
            .status-dot {
                height: 15px;
                width: 15px;
                border-radius: 50%;
                display: inline-block;
                margin-right: 10px;
            }
            .green .status-dot { background-color: #28a745; }
            .yellow .status-dot { background-color: #ffc107; }
            .red .status-dot { background-color: #dc3545; }
            .status-text {
                display: inline-block;
                vertical-align: top;
                width: calc(100% - 30px);
            }
            .grid-container {
                display: grid;
                grid-template-columns: repeat(2, 1fr);
                gap: 10px;
                margin: 15px 0;
            }
            .grid-item {
                background-color: #f8f9fa;
                padding: 10px;
                border-radius: 5px;
                border-left: 3px solid #6c757d;
            }
            .info-box {
                background-color: #e7f5ff;
                padding: 15px;
                border-radius: 8px;
                margin: 15px 0;
                border-left: 5px solid #1c7ed6;
            }
            .footer {
                margin-top: 50px;
                padding: 20px 0;
                text-align: center;
                color: #666;
                font-size: 0.9rem;
            }
        </style>
        """, unsafe_allow_html=True)

local_css("styles.css")

# Cabe√ßalho moderno
def render_header():
    col1, col2 = st.columns([1, 4])
    with col1:
        # Placeholder para logo (removida a depend√™ncia de arquivo)
        st.markdown("""
        <div style="width:120px; height:120px; background:#eee; display:flex; 
                    align-items:center; justify-content:center; border-radius:10px;">
            LOGO
        </div>
        """, unsafe_allow_html=True)
    with col2:
        st.title("Protocolo de Interpreta√ß√£o e Conduta M√©dica")
        st.markdown("""
        <div class="header-subtitle">
            FORTNEER - Assessoria para Regulariza√ß√£o Empresarial<br>
            <span class="header-location">Sombrio & Morro da Fuma√ßa</span>
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown("---")

# Menu lateral moderno
def render_sidebar():
    with st.sidebar:
        # Placeholder para logo m√©dico (removida a depend√™ncia de arquivo)
        st.markdown("""
        <div style="width:120px; height:120px; background:#eee; display:flex; 
                    align-items:center; justify-content:center; border-radius:10px; margin:0 auto;">
            LOGO
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div class="sidebar-header">
            <h3>Menu de Navega√ß√£o</h3>
        </div>
        """, unsafe_allow_html=True)
        
        menu_options = {
            "Introdu√ß√£o": "üìã",
            "Aptid√£o para Atividades Cr√≠ticas": "‚ö†Ô∏è",
            "Exames com Normas Espec√≠ficas": "üîç",
            "Afastamento e Restri√ß√µes": "üöß",
            "Retorno ao Trabalho": "‚Ü©Ô∏è",
            "Manipuladores de Alimentos": "üçΩÔ∏è",
            "Doen√ßas Relacionadas ao Trabalho": "üè≠",
            "Avalia√ß√µes N√£o Ocupacionais": "ü©∫",
            "Avalia√ß√£o de PCD": "‚ôø"
        }
        
        selected = st.radio(
            "Selecione a se√ß√£o:",
            options=list(menu_options.keys()),
            format_func=lambda x: f"{menu_options[x]} {x}",
            label_visibility="collapsed"
        )
        
        st.markdown("---")
        
        # Se√ß√£o de informa√ß√µes r√°pidas
        st.markdown("""
        <div class="quick-info">
            <h4>üìÖ Atualiza√ß√£o</h4>
            <p>Vers√£o: 2.1.0 (Maio/2025)</p>
            
            <h4>üìû Contato</h4>
            <p>suporte@fortneer.com.br</p>
            <p>(48) 99999-9999</p>
        </div>
        """, unsafe_allow_html=True)
        
    return selected

# Componente de status (verde/amarelo/vermelho)
def status_indicator(status, text):
    if status == "green":
        st.markdown(f"""
        <div class="status-box green">
            <div class="status-dot"></div>
            <div class="status-text"><strong>Sinal Verde</strong><br>{text}</div>
        </div>
        """, unsafe_allow_html=True)
    elif status == "yellow":
        st.markdown(f"""
        <div class="status-box yellow">
            <div class="status-dot"></div>
            <div class="status-text"><strong>Sinal Amarelo</strong><br>{text}</div>
        </div>
        """, unsafe_allow_html=True)
    else:
        st.markdown(f"""
        <div class="status-box red">
            <div class="status-dot"></div>
            <div class="status-text"><strong>Sinal Vermelho</strong><br>{text}</div>
        </div>
        """, unsafe_allow_html=True)

# P√°gina de introdu√ß√£o
def render_intro():
    st.header("üìã Introdu√ß√£o")
    
    with st.expander("üìå Vis√£o Geral", expanded=True):
        st.write("""
        A conduta m√©dica para interpreta√ß√£o dos exames e defini√ß√£o de aptid√£o ao trabalho deve seguir crit√©rios t√©cnico-cient√≠ficos, 
        √©ticos e normativos. Este protocolo foi elaborado baseado nos preceitos √©ticos e na legisla√ß√£o vigente e tem por abrang√™ncia 
        todos os atendimentos realizados por m√©dicos em agendamentos feitos pela FORTNEER ou por suas empresas clientes.
        """)
    
    col1, col2 = st.columns(2)
    
    with col1:
        with st.expander("üß≠ Princ√≠pios Gerais", expanded=True):
            st.markdown("""
            1. **Alinhamento normativo:** Seguir os crit√©rios deste protocolo, conforme NR-7 e Resolu√ß√£o 2323/2022 do CFM.
            2. **Flexibilidade condicionada:** Condutas diferentes s√£o permitidas quando justificadas e registradas.
            3. **Suporte t√©cnico:** Em caso de d√∫vidas, contatar o respons√°vel pela sa√∫de ocupacional da FORTNEER.
            4. **Transpar√™ncia:** Trabalhadores devem ser informados sobre exames e resultados.
            5. **Conformidade legal:** Observar toda a Resolu√ß√£o 2323/2022 do CFM.
            """)
    
    with col2:
        with st.expander("‚öñÔ∏è Responsabilidades", expanded=True):
            st.markdown("""
            - **Solicita√ß√£o de exames:** O m√©dico pode solicitar repeti√ß√£o ou novos exames para forma√ß√£o de convic√ß√£o t√©cnica.
            - **Registro documental:** Todas as condutas devem ser justificadas tecnicamente e discutidas com o m√©dico respons√°vel pelo PCMSO.
            - **Sigilo e √©tica:** Manter confidencialidade dos dados m√©dicos conforme legisla√ß√£o.
            """)
    
    st.markdown("---")
    
    with st.expander("üìö Documenta√ß√£o de Refer√™ncia", expanded=False):
        st.markdown("""
        - **NR-7:** Programa de Controle M√©dico de Sa√∫de Ocupacional
        - **Resolu√ß√£o CFM 2323/2022:** Diretrizes para sa√∫de ocupacional
        - **CLT:** Consolida√ß√£o das Leis do Trabalho
        - **Lei 605/1949:** Disp√µe sobre o repouso semanal remunerado
        """)

# P√°gina de aptid√£o para atividades cr√≠ticas
def render_critical_activities():
    st.header("‚ö†Ô∏è Aptid√£o para Atividades Cr√≠ticas")
    
    with st.expander("‚ÑπÔ∏è Defini√ß√£o", expanded=True):
        st.write("""
        Atividades cr√≠ticas s√£o definidas na NR-7 como aquelas que exigem avalia√ß√£o m√©dica espec√≠fica para definir a aptid√£o do empregado.
        Estas atividades envolvem riscos significativos que podem ser agravados por condi√ß√µes de sa√∫de do trabalhador.
        """)
    
    tab1, tab2, tab3 = st.tabs(["üìã Exemplos", "üö¶ Crit√©rio Tricolor", "üîç Avalia√ß√µes"])
    
    with tab1:
        st.subheader("Exemplos de Atividades Cr√≠ticas")
        st.markdown("""
        <div class="grid-container">
            <div class="grid-item">üìå Trabalhos com risco de queda</div>
            <div class="grid-item">üìå Espa√ßos confinados</div>
            <div class="grid-item">üìå Opera√ß√£o de m√°quinas perigosas</div>
            <div class="grid-item">üìå Condu√ß√£o de ve√≠culos</div>
            <div class="grid-item">üìå Risco de choques el√©tricos</div>
            <div class="grid-item">üìå Pontes rolantes</div>
        </div>
        """, unsafe_allow_html=True)
    
    with tab2:
        st.subheader("Sistema de Classifica√ß√£o")
        
        cols = st.columns(3)
        with cols[0]:
            status_indicator("green", "Condi√ß√£o que n√£o deve ser considerada como crit√©rio de incompatibilidade.")
        with cols[1]:
            status_indicator("yellow", "Condi√ß√£o que merece investiga√ß√£o e/ou acompanhamento. Avaliar caso a caso.")
        with cols[2]:
            status_indicator("red", "Existe contraindica√ß√£o para a execu√ß√£o de atividades cr√≠ticas.")
        
        st.markdown("""
        <div class="info-box">
            üí° Este sistema visa padronizar a avalia√ß√£o m√©dica, mas n√£o substitui o julgamento cl√≠nico do profissional.
        </div>
        """, unsafe_allow_html=True)
    
    with tab3:
        st.subheader("Avalia√ß√µes Espec√≠ficas")
        
        evaluation = st.selectbox("Selecione o tipo de avalia√ß√£o:", [
            "Acuidade Visual e Avalia√ß√£o Oftalmol√≥gica",
            "Arritmias Card√≠acas e ECG",
            "Hipertens√£o Arterial",
            "Diabetes e Glicemia em Jejum",
            "Obesidade",
            "Anemias e Hemograma",
            "Equil√≠brio e Consci√™ncia",
            "Fatores Psicossociais",
            "Acuidade Auditiva"
        ], key="eval_select")
        
        if evaluation == "Acuidade Visual e Avalia√ß√£o Oftalmol√≥gica":
            st.subheader("üëÅÔ∏è Acuidade Visual")
            
            cols = st.columns(3)
            with cols[0]:
                status_indicator("green", """
                - AV ‚â• 20/40 em cada olho
                - AV ‚â• 20/30 + PL em um olho
                - Vis√£o perif√©rica ‚â• 60¬∞ cada olho
                """)
            with cols[1]:
                status_indicator("yellow", """
                - Vis√£o monocular com perda antiga
                - Vis√£o perif√©rica ‚â• 120¬∞ em um olho
                """)
            with cols[2]:
                status_indicator("red", """
                - Vis√£o monocular recente
                - Perda visual significativa
                """)
            
            st.markdown("---")
            st.write("""
            **Crit√©rios adicionais:**
            - Teste de vis√£o de cores para atividades que exigem discrimina√ß√£o crom√°tica
            - Avalia√ß√£o de campo visual para motoristas profissionais
            """)
        
        elif evaluation == "Arritmias Card√≠acas e ECG":
            st.subheader("‚ù§Ô∏è Arritmias Card√≠acas e ECG")
            
            cols = st.columns(3)
            with cols[0]:
                status_indicator("green", """
                - Altera√ß√µes de repolariza√ß√£o
                - Extrass√≠stoles atriais isoladas
                - BAV 1¬∞ grau
                - BRD isolado
                """)
            with cols[1]:
                status_indicator("yellow", """
                - Sobrecarga de VE
                - Extrass√≠stoles frequentes
                - BAV 2¬∞ grau tipo I
                - BRE (avaliar)
                """)
            with cols[2]:
                status_indicator("red", """
                - BAV 2¬∞ grau tipo II
                - BAV total
                - Taquicardia SV Parox√≠stica
                """)
            
            st.markdown("---")
            st.write("""
            **Recomenda√ß√µes:**
            - Encaminhar para avalia√ß√£o cardiol√≥gica em casos amarelos/vermelhos
            - Considerar Holter 24h quando necess√°rio
            """)

# P√°gina de avalia√ß√£o de PCD
def render_pcd_assessment():
    st.header("‚ôø Avalia√ß√£o de PCD")
    
    with st.expander("üìå Base Legal", expanded=False):
        st.markdown("""
        - **Conven√ß√£o sobre os Direitos das Pessoas com Defici√™ncia**
        - **Lei Brasileira de Inclus√£o (Lei 13.146/2015)**
        - **Lei 12.764/2012** (autismo)
        - **Decretos 3298/1999, 5296/2004 e 6949/2009**
        - **Parecer CONJUR 444/2011**
        - **IN SIT/MTE 98/2012**
        """)
    
    with st.form("form_laudo_pcd", clear_on_submit=False):
        st.subheader("üìù Dados para Laudo PCD")
        
        tabs = st.tabs(["Dados Empresa", "Dados Trabalhador", "Avalia√ß√£o M√©dica", "Revis√£o"])
        
        with tabs[0]:
            st.text_input("Raz√£o Social da Empresa*", key="empresa_razao")
            st.text_input("Endere√ßo Completo*", key="empresa_endereco")
            st.text_input("Telefone para Contato*", key="empresa_telefone")
        
        with tabs[1]:
            cols = st.columns(2)
            with cols[0]:
                st.text_input("Nome Completo*", key="nome")
                st.date_input("Data de Nascimento*", key="data_nascimento")
            with cols[1]:
                st.text_input("Matr√≠cula (se aplic√°vel)", key="matricula")
                st.text_input("RG*", key="rg")
            
            st.radio("Sexo*", ["Feminino", "Masculino", "Outro"], key="sexo", horizontal=True)
        
        with tabs[2]:
            cols = st.columns(2)
            with cols[0]:
                st.selectbox("Origem da Defici√™ncia*", [
                    "Acidente - Trabalho",
                    "Acidente - Comum",
                    "Adquirida",
                    "Cong√™nita",
                    "Doen√ßa",
                    "Heredit√°ria",
                    "P√≥s Operat√≥rio"
                ], key="origem_deficiencia")
                
                st.text_input("CID-10*", key="cid")
            with cols[1]:
                st.date_input("Data de in√≠cio das manifesta√ß√µes*", key="data_manifestacao")
                st.radio("PCD Reabilitado*", ["Sim", "N√£o"], key="pcd_reabilitado", horizontal=True)
            
            st.text_area("Descri√ß√£o detalhada das altera√ß√µes*", key="alteracoes", height=100)
            st.text_area("Limita√ß√µes funcionais para atividades di√°rias*", key="limitacoes", height=100)
            
            st.subheader("Tipo de Defici√™ncia*")
            cols = st.columns(3)
            with cols[0]:
                st.checkbox("Defici√™ncia F√≠sica", key="deficiencia_fisica")
                st.checkbox("Defici√™ncia Auditiva", key="deficiencia_auditiva")
            with cols[1]:
                st.checkbox("Defici√™ncia Visual", key="deficiencia_visual")
                st.checkbox("Defici√™ncia Intelectual", key="deficiencia_intelectual")
            with cols[2]:
                st.checkbox("Defici√™ncia Mental", key="deficiencia_mental")
                st.checkbox("Defici√™ncia M√∫ltipla", key="deficiencia_multipla")
        
        with tabs[3]:
            st.subheader("Resumo do Laudo")
            
            if st.session_state.get('nome'):
                cols = st.columns(2)
                with cols[0]:
                    st.markdown("**Dados do Trabalhador**")
                    st.write(f"Nome: {st.session_state.nome}")
                    st.write(f"Nascimento: {st.session_state.data_nascimento}")
                    st.write(f"RG: {st.session_state.rg}")
                
                with cols[1]:
                    st.markdown("**Avalia√ß√£o M√©dica**")
                    st.write(f"Origem: {st.session_state.origem_deficiencia}")
                    st.write(f"CID-10: {st.session_state.cid}")
                    st.write(f"Reabilitado: {st.session_state.pcd_reabilitado}")
                
                st.markdown("**Descri√ß√£o das Altera√ß√µes**")
                st.write(st.session_state.alteracoes)
                
                st.markdown("**Tipos de Defici√™ncia**")
                tipos = []
                if st.session_state.deficiencia_fisica: tipos.append("F√≠sica")
                if st.session_state.deficiencia_auditiva: tipos.append("Auditiva")
                if st.session_state.deficiencia_visual: tipos.append("Visual")
                if st.session_state.deficiencia_intelectual: tipos.append("Intelectual")
                if st.session_state.deficiencia_mental: tipos.append("Mental")
                if st.session_state.deficiencia_multipla: tipos.append("M√∫ltipla")
                
                st.write(", ".join(tipos) if tipos else "Nenhum tipo selecionado")
            else:
                st.warning("Preencha os dados nas abas anteriores para visualizar o resumo.")
        
        submitted = st.form_submit_button("‚úÖ Gerar Laudo PCD")
        
        if submitted:
            # Valida√ß√£o dos campos obrigat√≥rios
            required_fields = [
                'empresa_razao', 'empresa_endereco', 'empresa_telefone',
                'nome', 'data_nascimento', 'rg', 'origem_deficiencia',
                'cid', 'data_manifestacao', 'alteracoes', 'limitacoes'
            ]
            
            missing_fields = [field for field in required_fields if not st.session_state.get(field)]
            
            if missing_fields:
                st.error(f"Por favor, preencha todos os campos obrigat√≥rios. Campos faltantes: {', '.join(missing_fields)}")
            else:
                # Criar PDF (simplificado para exemplo)
                buffer = BytesIO()
                c = canvas.Canvas(buffer)
                
                # Cabe√ßalho
                c.setFont("Helvetica-Bold", 14)
                c.drawString(100, 800, "LAUDO M√âDICO - CARACTERIZA√á√ÉO DE PCD")
                c.drawString(100, 780, f"Emitido em: {datetime.now().strftime('%d/%m/%Y %H:%M')}")
                
                # Dados da empresa
                c.setFont("Helvetica-Bold", 12)
                c.drawString(100, 750, "Dados da Empresa:")
                c.setFont("Helvetica", 12)
                c.drawString(100, 730, f"Raz√£o Social: {st.session_state.empresa_razao}")
                c.drawString(100, 710, f"Endere√ßo: {st.session_state.empresa_endereco}")
                c.drawString(100, 690, f"Telefone: {st.session_state.empresa_telefone}")
                
                # Dados do trabalhador
                c.setFont("Helvetica-Bold", 12)
                c.drawString(100, 660, "Dados do Trabalhador:")
                c.setFont("Helvetica", 12)
                c.drawString(100, 640, f"Nome: {st.session_state.nome}")
                c.drawString(100, 620, f"Data Nascimento: {st.session_state.data_nascimento}")
                c.drawString(100, 600, f"RG: {st.session_state.rg}")
                c.drawString(100, 580, f"Sexo: {st.session_state.sexo}")
                
                # Avalia√ß√£o m√©dica
                c.setFont("Helvetica-Bold", 12)
                c.drawString(100, 550, "Avalia√ß√£o M√©dica:")
                c.setFont("Helvetica", 12)
                c.drawString(100, 530, f"Origem: {st.session_state.origem_deficiencia}")
                c.drawString(100, 510, f"CID-10: {st.session_state.cid}")
                c.drawString(100, 490, f"Reabilitado: {st.session_state.pcd_reabilitado}")
                
                # Descri√ß√µes
                c.drawString(100, 460, "Descri√ß√£o das Altera√ß√µes:")
                textobject = c.beginText(100, 440)
                for line in st.session_state.alteracoes.split('\n'):
                    textobject.textLine(line)
                c.drawText(textobject)
                
                c.drawString(100, 380, "Limita√ß√µes Funcionais:")
                textobject = c.beginText(100, 360)
                for line in st.session_state.limitacoes.split('\n'):
                    textobject.textLine(line)
                c.drawText(textobject)
                
                c.showPage()
                
                # Termo de ci√™ncia
                c.setFont("Helvetica-Bold", 14)
                c.drawString(100, 800, "TERMO DE CI√äNCIA")
                
                c.setFont("Helvetica", 12)
                c.drawString(100, 770, "Eu, ________________________________________________________,")
                c.drawString(100, 750, "RG ________________________________________________________,")
                c.drawString(100, 730, "declaro que estou ciente do conte√∫do deste laudo e autorizo sua utiliza√ß√£o")
                c.drawString(100, 710, "para os fins legais pertinentes, conforme legisla√ß√£o vigente.")
                
                c.drawString(100, 670, "Assinatura: _________________________________________________")
                c.drawString(100, 650, "Data: ____/____/____")
                
                c.save()
                
                pdf_bytes = buffer.getvalue()
                buffer.close()
                
                st.success("Laudo gerado com sucesso!")
                
                st.download_button(
                    label="‚¨áÔ∏è Baixar Laudo PCD",
                    data=pdf_bytes,
                    file_name=f"laudo_pcd_{st.session_state.nome.replace(' ', '_')}.pdf",
                    mime="application/pdf"
                )

# Rodap√© profissional
def render_footer():
    st.markdown("---")
    st.markdown("""
    <div class="footer">
        <div class="footer-content">
            <div class="footer-info">
                <h4>FORTNEER - Assessoria para Regulariza√ß√£o Empresarial</h4>
                <p>Sombrio & Morro da Fuma√ßa - SC</p>
                <p>Atualizado em: {}</p>
            </div>
        </div>
    </div>
    """.format(datetime.now().strftime("%d/%m/%Y")), 
    unsafe_allow_html=True)

# P√°gina principal
def main():
    render_header()
    selected_menu = render_sidebar()
    
    if selected_menu == "Introdu√ß√£o":
        render_intro()
    elif selected_menu == "Aptid√£o para Atividades Cr√≠ticas":
        render_critical_activities()
    elif selected_menu == "Avalia√ß√£o de PCD":
        render_pcd_assessment()
    # ... outras p√°ginas
    
    render_footer()

if __name__ == "__main__":
    main()
